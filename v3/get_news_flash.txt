AqMGCgxHU1BfMC45LjUuMjIKDEdTUF8wLjkuNC4yMQoMR1NQXzAuOS40LjIwCgxHU1BfMC45LjMuMTkKDEdTUF8wLjkuMy4xOAoMR1NQXzAuOS4zLjE3CgxHU1BfMC45LjIuMTYKDEdTUF8wLjkuMi4xNQoMR1NQXzAuOS4yLjE0CgxHU1BfMC45LjEuMTMKDEdTUF8wLjkuMS4xMgoMR1NQXzAuOS4xLjExCgxHU1BfMC45LjAuMTAKC0dTUF8wLjkuMC45CgtHU1BfMC45LjAuOAoLR1NQXzAuOS4wLjcKC0dTUF8wLjkuMC42CgtHU1BfMC45LjAuNQoLR1NQXzAuOS4wLjQKC0dTUF8wLjkuMC4zCgtHU1BfMC45LjAuMgoLR1NQXzAuOS4wLjEKC0dTUF8wLjkuMC4wCgxHU1BfMC44LjExLjAQARrLAQpEAkJZb3UgYXJlIHVzaW5nIGEgdmVyc2lvbiBvZiBWMyB0aGF0IGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuIFBsZWFzZSAKNQIGdXBkYXRlCisCKWh0dHBzOi8vdm9yYXBpcy5wYWdlcy5kZXYvIy9ob21lL2Rvd25sb2FkCkwCSiBub3cgdG8gcmVjZWl2ZSB2YXJpb3VzIGJ1Zy1maXhlcyBhbmQgbmV3IGZlYXR1cmVzLiBMaW5rIGhhcyBiZWVuIHVwZGF0ZWQuIpwBCmACXlRoaXMgaXMgYSBkZW1vIHZlcnNpb24gb2YgVjMuIEZvciBmdWxsIHBlcmZvcm1hbmNlIGFuZCByZWxpYWJpbGl0eSwgZG93bmxvYWQgdGhlIGZ1bGwgdmVyc2lvbiAKMwIEaGVyZQorAilodHRwczovL3ZvcmFwaXMucGFnZXMuZGV2LyMvaG9tZS9kb3dubG9hZAoDAgEuKmwKZAJiWW91IGFyZSB0ZXN0aW5nIGEgcHJlLXJlbGVhc2UgdmVyc2lvbiBvZiBWMywgcGxlYXNlIGlucXVpcmUgYXQgdGhlIG9mZmljaWFsIGNoYXQgZm9yIGEgYnVnIHJlcG9ydC4SBFRWV04KgQECfwp9AgRpbmZvCnAKMwIxV2VsY29tZSB0byBPcGVuIEJldGEgVGVzdCEgRmluZCBtb3JlIGluZm9ybWF0aW9uIAo0AgRoZXJlCiwCKmh0dHBzOi8vdm9yYXBpcy5wYWdlcy5kZXYvIy9qb2luX2NvbW11bml0eQoDAgEuEgNWQTASfE1sdlVtNHUxNFRESHlkU2pWcFpxb281LTNmZk83ZjJmXy11djR5Qmt6VWdobzFiVTJjOXFVWklaM05RMTY1WjZqMnFOcDdxSnhOQmczSHIxV09Qc1hTQTNWNUpTeU10V1dDTktzaW56eVRRbDhUR2RZT0lQNi1wMnJmaXE